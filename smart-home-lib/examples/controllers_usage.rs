//! –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ç–µ–≤—ã–º–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞–º–∏ —É–º–Ω–æ–≥–æ –¥–æ–º–∞
//!
//! –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã–º–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏ —á–µ—Ä–µ–∑ TCP (—Ä–æ–∑–µ—Ç–∫–∏) –∏ UDP (—Ç–µ—Ä–º–æ–º–µ—Ç—Ä—ã).
//!
//! –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ —ç–º—É–ª—è—Ç–æ—Ä—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–∞–ª–∞—Ö:
//!
//! **–¢–µ—Ä–º–æ–º–µ—Ç—Ä—ã (UDP):**
//! ```bash
//! cargo run --example therm_emulator kitchen_therm_001 127.0.0.1:4001 22.5 normal
//! cargo run --example therm_emulator ac_therm_001 127.0.0.1:4002 24.0 normal
//! ```
//!
//! **–†–æ–∑–µ—Ç–∫–∏ (TCP):**
//! ```bash
//! cargo run --example socket_emulator kettle_001 127.0.0.1:3001 2000.0
//! cargo run --example socket_emulator tv_001 127.0.0.1:3002 150.0
//! ```
//!
//! –ó–∞—Ç–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä:
//! ```bash
//! cargo run --example controllers_usage
//! ```

use smart_home_lib::prelude::*;
use std::error::Error;
use std::net::SocketAddr;
use std::time::Duration;
use tokio::time::sleep;

/// –°–æ–∑–¥–∞–µ—Ç –∫—É—Ö–Ω—é —Å —Å–µ—Ç–µ–≤—ã–º–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞–º–∏
fn create_kitchen() -> Room {
    let mut room = Room::new();

    // TCP –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —á–∞–π–Ω–∏–∫–∞
    let kettle_addr: SocketAddr = "127.0.0.1:3001".parse().unwrap();
    let kettle_controller = SocketController::new(
        kettle_addr,
        2000.0, // 2–∫–í—Ç —á–∞–π–Ω–∏–∫
        Duration::from_secs(3),
    );
    room.add_controller("—á–∞–π–Ω–∏–∫", DeviceController::Socket(kettle_controller));

    // UDP –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —Ç–µ—Ä–º–æ–º–µ—Ç—Ä–∞
    let kitchen_therm = ThermController::new(22.5, "127.0.0.1:4001", Duration::from_secs(5));
    room.add_controller("—Ç–µ—Ä–º–æ–º–µ—Ç—Ä", DeviceController::Therm(kitchen_therm));

    room
}

/// –°–æ–∑–¥–∞–µ—Ç –≥–æ—Å—Ç–∏–Ω—É—é —Å —Å–µ—Ç–µ–≤—ã–º–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞–º–∏
fn create_living_room() -> Room {
    let mut room = Room::new();

    // TCP –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–∞
    let tv_addr: SocketAddr = "127.0.0.1:3002".parse().unwrap();
    let tv_controller = SocketController::new(
        tv_addr,
        150.0, // 150–í—Ç —Ç–µ–ª–µ–≤–∏–∑–æ—Ä
        Duration::from_secs(3),
    );
    room.add_controller("—Ç–µ–ª–µ–≤–∏–∑–æ—Ä", DeviceController::Socket(tv_controller));

    // UDP –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–∞
    let ac_therm = ThermController::new(24.0, "127.0.0.1:4002", Duration::from_secs(10));
    room.add_controller("–∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä", DeviceController::Therm(ac_therm));

    room
}

/// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–∑–µ—Ç–∫–∞–º–∏ —á–µ—Ä–µ–∑ TCP
async fn demo_socket_controllers(house: &mut SmartHouse) -> Result<(), Box<dyn Error>> {
    println!("üîå === –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–∑–µ—Ç–∫–∞–º–∏ —á–µ—Ä–µ–∑ TCP ===");

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞–π–Ω–∏–∫–æ–º
    println!("\n‚òï –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞–π–Ω–∏–∫–æ–º:");
    if let Ok(DeviceController::Socket(kettle)) = house.controller_mut("–∫—É—Ö–Ω—è", "—á–∞–π–Ω–∏–∫")
    {
        println!("üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —á–∞–π–Ω–∏–∫—É...");

        match kettle.turn_on().await {
            Ok(_) => {
                println!("‚úÖ –ß–∞–π–Ω–∏–∫ –≤–∫–ª—é—á–µ–Ω");

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ—â–Ω–æ—Å—Ç—å
                match kettle.power().await {
                    Ok(power) => println!("‚ö° –ú–æ—â–Ω–æ—Å—Ç—å —á–∞–π–Ω–∏–∫–∞: {}", power),
                    Err(e) => println!("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ—â–Ω–æ—Å—Ç–∏: {}", e),
                }

                // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã, –∑–∞—Ç–µ–º –≤—ã–∫–ª—é—á–∞–µ–º
                sleep(Duration::from_secs(2)).await;

                match kettle.turn_off().await {
                    Ok(_) => println!("üî¥ –ß–∞–π–Ω–∏–∫ –≤—ã–∫–ª—é—á–µ–Ω"),
                    Err(e) => println!("‚ùå –û—à–∏–±–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è: {}", e),
                }
            }
            Err(e) => println!("‚ùå –û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è —á–∞–π–Ω–∏–∫–∞: {}", e),
        }
    }

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–æ–º
    println!("\nüì∫ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–æ–º:");
    if let Ok(DeviceController::Socket(tv)) = house.controller_mut("–≥–æ—Å—Ç–∏–Ω–∞—è", "—Ç–µ–ª–µ–≤–∏–∑–æ—Ä")
    {
        println!("üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä—É...");

        match tv.turn_on().await {
            Ok(_) => {
                println!("‚úÖ –¢–µ–ª–µ–≤–∏–∑–æ—Ä –≤–∫–ª—é—á–µ–Ω");

                match tv.power().await {
                    Ok(power) => println!("‚ö° –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–∞: {}", power),
                    Err(e) => println!("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ—â–Ω–æ—Å—Ç–∏: {}", e),
                }
            }
            Err(e) => println!("‚ùå –û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–∞: {}", e),
        }
    }

    Ok(())
}

/// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–µ—Ä–º–æ–º–µ—Ç—Ä–æ–≤ —á–µ—Ä–µ–∑ UDP
async fn demo_therm_controllers(house: &mut SmartHouse) -> Result<(), Box<dyn Error>> {
    println!("\nüå°Ô∏è === –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–µ—Ä–º–æ–º–µ—Ç—Ä–æ–≤ —á–µ—Ä–µ–∑ UDP ===");

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Ä–º–æ–º–µ—Ç—Ä –Ω–∞ –∫—É—Ö–Ω–µ
    println!("\nüç≥ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –Ω–∞ –∫—É—Ö–Ω–µ:");
    if let Ok(DeviceController::Therm(kitchen_therm)) = house.controller_mut("–∫—É—Ö–Ω—è", "—Ç–µ—Ä–º–æ–º–µ—Ç—Ä")
    {
        println!("üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–µ—Ä–º–æ–º–µ—Ç—Ä—É –∫—É—Ö–Ω–∏...");

        kitchen_therm.start();
        println!("üå°Ô∏è –¢–µ—Ä–º–æ–º–µ—Ç—Ä –∫—É—Ö–Ω–∏ –∑–∞–ø—É—â–µ–Ω");

        // –°–æ–±–∏—Ä–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞–Ω–∏–π
        for i in 1..=3 {
            sleep(Duration::from_secs(2)).await;

            match kitchen_therm.temperature() {
                Ok(temp) => println!("üìä –ü–æ–∫–∞–∑–∞–Ω–∏–µ #{}: {}", i, temp),
                Err(e) => println!("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞–Ω–∏—è #{}: {}", i, e),
            }
        }

        kitchen_therm.stop();
        println!("üõë –¢–µ—Ä–º–æ–º–µ—Ç—Ä –∫—É—Ö–Ω–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Ä–º–æ–º–µ—Ç—Ä –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–∞
    println!("\n‚ùÑÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–∞:");
    if let Ok(DeviceController::Therm(ac_therm)) = house.controller_mut("–≥–æ—Å—Ç–∏–Ω–∞—è", "–∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä")
    {
        println!("üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–µ—Ä–º–æ–º–µ—Ç—Ä—É –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–∞...");

        ac_therm.start();
        println!("üå°Ô∏è –¢–µ—Ä–º–æ–º–µ—Ç—Ä –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–∞ –∑–∞–ø—É—â–µ–Ω");

        sleep(Duration::from_secs(3)).await;

        match ac_therm.temperature() {
            Ok(temp) => {
                println!("üìä –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–∞: {}", temp);

                // –ò–º–∏—Ç–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
                if temp.value() > 25.0 {
                    println!("üî• –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤—ã—Å–æ–∫–∞—è, –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–µ–µ");
                } else if temp.value() < 20.0 {
                    println!("üßä –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∏–∑–∫–∞—è, –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–ª–∞–±–µ–µ");
                } else {
                    println!("‚úÖ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –Ω–æ—Ä–º–µ");
                }
            }
            Err(e) => println!("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã: {}", e),
        }

        ac_therm.stop();
        println!("üõë –¢–µ—Ä–º–æ–º–µ—Ç—Ä –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    }

    Ok(())
}

/// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞–º–∏ —á–µ—Ä–µ–∑ –æ–±–æ–±—â–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
async fn demo_generic_controllers(house: &SmartHouse) {
    println!("\nüîß === –û–±–æ–±—â–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞–º–∏ ===");

    for room_name in house.rooms_keys() {
        if let Some(room) = house.room(&room_name) {
            println!("\nüè† –ö–æ–º–Ω–∞—Ç–∞: {}", room_name);
            println!("üåê –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ: {}", room.controllers_count());

            for controller_key in room.controllers_keys() {
                if let Some(controller) = room.controller(&controller_key) {
                    println!("  üì± {}: {}", controller_key, controller.report());
                }
            }
        }
    }
}

/// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
async fn demo_connection_errors(house: &mut SmartHouse) {
    println!("\n‚ùå === –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ ===");

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å –Ω–µ–≤–µ—Ä–Ω—ã–º –∞–¥—Ä–µ—Å–æ–º
    let mut temp_room = Room::new();
    let broken_socket = SocketController::new(
        "127.0.0.1:9999".parse().unwrap(), // –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ—Ä—Ç
        1000.0,
        Duration::from_secs(1), // –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç
    );
    temp_room.add_controller("broken_socket", DeviceController::Socket(broken_socket));

    if let Some(DeviceController::Socket(socket)) = temp_room.controller_mut("broken_socket") {
        println!("üîå –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ä–æ–∑–µ—Ç–∫–µ...");

        match socket.turn_on().await {
            Ok(_) => println!("‚úÖ –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è"),
            Err(e) => println!("‚ùå –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞: {}", e),
        }
    }

    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—É
    match house.controller("–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è_–∫–æ–º–Ω–∞—Ç–∞", "–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä") {
        Ok(_) => println!("‚úÖ –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –Ω–∞—à–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä"),
        Err(e) => println!("‚ùå –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞: {}", e),
    }
}

#[tokio::main]
async fn main() -> Result<(), Box<dyn Error>> {
    println!("üè° –£–º–Ω—ã–π –¥–æ–º: —Å–µ—Ç–µ–≤—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã");
    println!("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");

    // –°–æ–∑–¥–∞–µ–º –¥–æ–º —Ç–æ–ª—å–∫–æ —Å —Å–µ—Ç–µ–≤—ã–º–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞–º–∏
    let mut house = house![
        ("–∫—É—Ö–Ω—è", create_kitchen()),
        ("–≥–æ—Å—Ç–∏–Ω–∞—è", create_living_room()),
    ];

    println!("üèóÔ∏è –°–æ–∑–¥–∞–Ω —É–º–Ω—ã–π –¥–æ–º —Å —Å–µ—Ç–µ–≤—ã–º–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞–º–∏:");
    println!("   üç≥ –ö—É—Ö–Ω—è: —á–∞–π–Ω–∏–∫ (TCP) + —Ç–µ—Ä–º–æ–º–µ—Ç—Ä (UDP)");
    println!("   üõãÔ∏è –ì–æ—Å—Ç–∏–Ω–∞—è: —Ç–µ–ª–µ–≤–∏–∑–æ—Ä (TCP) + –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä (UDP)");

    // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø—É—Å–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤
    println!("\nüí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç–º—É–ª—è—Ç–æ—Ä—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–∞–ª–∞—Ö:");
    println!("üìã –¢–µ—Ä–º–æ–º–µ—Ç—Ä—ã (UDP):");
    println!(
        "   üå°Ô∏è cargo run --example therm_emulator kitchen_therm_001 127.0.0.1:4001 22.5 normal"
    );
    println!("   üå°Ô∏è cargo run --example therm_emulator ac_therm_001 127.0.0.1:4002 24.0 normal");
    println!("üìã –†–æ–∑–µ—Ç–∫–∏ (TCP):");
    println!("   üîå cargo run --example socket_emulator kettle_001 127.0.0.1:3001 2000.0");
    println!("   üîå cargo run --example socket_emulator tv_001 127.0.0.1:3002 150.0");

    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
    println!("\n‚è≥ –ù–∞—á–∏–Ω–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ (–≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤)...");
    sleep(Duration::from_secs(5)).await;

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    demo_socket_controllers(&mut house).await?;
    demo_therm_controllers(&mut house).await?;
    demo_generic_controllers(&house).await;
    demo_connection_errors(&mut house).await;

    // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    println!("\nüìã === –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤ ===");
    println!("{}", house.report());

    println!("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
    Ok(())
}
