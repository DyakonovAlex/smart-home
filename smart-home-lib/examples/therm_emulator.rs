//! –≠–º—É–ª—è—Ç–æ—Ä —É–º–Ω–æ–≥–æ —Ç–µ—Ä–º–æ–º–µ—Ç—Ä–∞ (–∏–º–∏—Ç–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ IoT-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ)

use smart_home_lib::emulators::{EmulationScenario, ThermEmulator};

use std::env;
use std::time::Duration;
use tokio::signal;

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    println!("üå°Ô∏è –ó–∞–ø—É—Å–∫ —ç–º—É–ª—è—Ç–æ—Ä–∞ —É–º–Ω–æ–≥–æ —Ç–µ—Ä–º–æ–º–µ—Ç—Ä–∞...");

    // –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    let args: Vec<String> = env::args().collect();
    let (device_id, target_addr, initial_temp, scenario) = parse_args(&args)?;

    println!("üè∑Ô∏è ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {}", device_id);
    println!("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞: {}", target_addr);
    println!("üå°Ô∏è –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {:.1}¬∞C", initial_temp);
    println!("üìä –°—Ü–µ–Ω–∞—Ä–∏–π: {}", scenario);

    // –°–æ–∑–¥–∞–µ–º —ç–º—É–ª—è—Ç–æ—Ä
    let mut emulator = ThermEmulator::new(initial_temp)
        .with_device_id(&device_id)
        .with_scenario(scenario)
        .with_update_interval(Duration::from_secs(2));

    // –í–∫–ª—é—á–∞–µ–º —Å–µ—Ç–µ–≤—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
    emulator.connect_to(&target_addr)?;

    // –ó–∞–ø—É—Å–∫–∞–µ–º —ç–º—É–ª—è—Ç–æ—Ä –≤ —Ñ–æ–Ω–µ
    emulator.start();

    println!("‚úÖ –≠–º—É–ª—è—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω! –û—Ç–ø—Ä–∞–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã...");
    println!("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏");

    signal::ctrl_c().await?;

    println!("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏. –ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...");
    emulator.stop();

    Ok(())
}

fn parse_args(args: &[String]) -> Result<(String, String, f64, EmulationScenario), String> {
    if args.len() < 5 {
        return Ok((
            "default_device_id".to_string(),
            "127.0.0.1:8080".to_string(),
            20.0,
            EmulationScenario::Normal,
        ));
    }

    let device_id = args[1].clone();
    let target_addr = args[2].clone();

    let initial_temp = args[3]
        .parse::<f64>()
        .map_err(|_| "Invalid temperature value")?;

    let scenario = match args[4].as_str() {
        "normal" => EmulationScenario::Normal,
        "fire" => EmulationScenario::Fire,
        "freeze" => EmulationScenario::Freeze,
        "fluctuate" => EmulationScenario::Fluctuate,
        _ => EmulationScenario::Normal,
    };

    Ok((device_id, target_addr, initial_temp, scenario))
}
