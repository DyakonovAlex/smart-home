//! –≠–º—É–ª—è—Ç–æ—Ä —É–º–Ω–æ–π —Ä–æ–∑–µ—Ç–∫–∏ (–∏–º–∏—Ç–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ IoT-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ)

use smart_home_lib::emulators::socket_emulator::{EmulatorConfig, SocketEmulator};
use std::env;
use tokio::signal;

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    println!("üîå –ó–∞–ø—É—Å–∫ async —ç–º—É–ª—è—Ç–æ—Ä–∞ —É–º–Ω–æ–π —Ä–æ–∑–µ—Ç–∫–∏...");

    // –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    let args: Vec<String> = env::args().collect();
    let (device_id, tcp_address, power_rating) = parse_args(&args)?;

    println!("üè∑Ô∏è ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {}", device_id);
    println!("üì° TCP –∞–¥—Ä–µ—Å: {}", tcp_address);
    println!("‚ö° –ù–æ–º–∏–Ω–∞–ª—å–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å: {:.1}W", power_rating);

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —ç–º—É–ª—è—Ç–æ—Ä–∞
    let config = EmulatorConfig::new(power_rating)
        .with_address(&tcp_address)
        .with_device_id(&device_id);

    // –°–æ–∑–¥–∞–µ–º async —ç–º—É–ª—è—Ç–æ—Ä
    let mut emulator = SocketEmulator::new(config);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π TCP —Å–µ—Ä–≤–µ—Ä
    emulator.start().await?;

    let actual_addr = emulator.local_addr()?;
    println!("‚úÖ Async —ç–º—É–ª—è—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ TCP –∞–¥—Ä–µ—Å–µ: {}", actual_addr);
    println!("üåê –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ");
    println!("üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ TCP:");
    println!("   ‚Ä¢ TurnOn  - –≤–∫–ª—é—á–∏—Ç—å —Ä–æ–∑–µ—Ç–∫—É");
    println!("   ‚Ä¢ TurnOff - –≤—ã–∫–ª—é—á–∏—Ç—å —Ä–æ–∑–µ—Ç–∫—É");
    println!("   ‚Ä¢ Power   - –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—É—â—É—é –º–æ—â–Ω–æ—Å—Ç—å");
    println!("\n‚èπÔ∏è  –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è graceful –æ—Å—Ç–∞–Ω–æ–≤–∫–∏");

    // Async –æ–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    signal::ctrl_c().await?;
    println!("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...");

    // Graceful async –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
    emulator.stop().await;
    println!("‚úÖ –≠–º—É–ª—è—Ç–æ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");

    Ok(())
}

/// –ü–∞—Ä—Å–∏—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
/// –ü–æ—Ä—è–¥–æ–∫: 1-device_id, 2-address, 3-power
fn parse_args(args: &[String]) -> Result<(String, String, f64), Box<dyn std::error::Error>> {
    if args.len() < 4 {
        println!(
            "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {} <device_id> <tcp_address> <power_rating>",
            args[0]
        );
        println!("üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é");

        return Ok((
            "smart_socket_001".to_string(),
            "127.0.0.1:3030".to_string(),
            1500.0,
        ));
    }

    let device_id = args[1].clone();
    let tcp_address = args[2].clone();

    let power_rating = args[3]
        .parse::<f64>()
        .map_err(|_| "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–æ—â–Ω–æ—Å—Ç–∏ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º)")?;

    if power_rating <= 0.0 {
        return Err("‚ùå –ú–æ—â–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º".into());
    }

    Ok((device_id, tcp_address, power_rating))
}
