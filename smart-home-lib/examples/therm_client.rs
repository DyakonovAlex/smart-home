//! –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ—Ä–º–æ–º–µ—Ç—Ä–∞

use smart_home_lib::prelude::*;
use std::time::Duration;
use tokio::time::{sleep, timeout};

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    println!("üè† –£–º–Ω—ã–π –¥–æ–º —Å UDP —Ç–µ—Ä–º–æ–º–µ—Ç—Ä–∞–º–∏\n");

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —Ç–µ—Ä–º–æ–º–µ—Ç—Ä–æ–≤
    println!("üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–µ—Ä–º–æ–º–µ—Ç—Ä–∞–º...");

    let mut kitchen_therm = ThermController::new(
        20.0,                    // –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
        "127.0.0.1:8080",        // –ê–¥—Ä–µ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è UDP
        Duration::from_secs(10), // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–∞–Ω–Ω—ã—Ö
    );

    let mut living_therm = ThermController::new(
        20.0,                    // –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
        "127.0.0.1:8081",        // –ê–¥—Ä–µ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è UDP
        Duration::from_secs(10), // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–∞–Ω–Ω—ã—Ö
    );

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    kitchen_therm.start();
    living_therm.start();

    println!("‚úÖ –¢–µ—Ä–º–æ–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∏ —Å–ª—É—à–∞—é—Ç UDP –ø–∞–∫–µ—Ç—ã");
    println!("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç–º—É–ª—è—Ç–æ—Ä—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–∞–ª–∞—Ö:");
    println!("   cargo run --example therm_emulator kitchen_001 127.0.0.1:8080 22.5 normal");
    println!("   cargo run --example therm_emulator living_001 127.0.0.1:8081 24.0 fluctuate\n");

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è polling (–æ–ø—Ä–æ—Å)
    println!("=== Polling Demo ===");
    for i in 1..=5 {
        println!("–û–ø—Ä–æ—Å #{}", i);

        // –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ
        match kitchen_therm.temperature() {
            Ok(temp) => println!("  –ö—É—Ö–Ω—è: {}", temp),
            Err(e) => println!("  –ö—É—Ö–Ω—è: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö - {}", e),
        }

        match living_therm.temperature() {
            Ok(temp) => println!("  –ì–æ—Å—Ç–∏–Ω–∞—è: {}", temp),
            Err(e) => println!("  –ì–æ—Å—Ç–∏–Ω–∞—è: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö - {}", e),
        }

        sleep(Duration::from_secs(3)).await;
    }

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è async/await
    println!("\n=== Async/Await Demo ===");
    println!("–û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Ç–∞–π–º–∞—É—Ç 5 —Å–µ–∫—É–Ω–¥)...");

    let kitchen_future = kitchen_therm.wait_for_new_data();
    let living_future = living_therm.wait_for_new_data();

    match timeout(Duration::from_secs(5), kitchen_future).await {
        Ok(Ok(temp)) => println!("‚úÖ –ö—É—Ö–Ω—è (async): {}", temp),
        Ok(Err(e)) => println!("‚ùå –ö—É—Ö–Ω—è (async): {}", e),
        Err(_) => println!("‚è±Ô∏è –ö—É—Ö–Ω—è (async): –¢–∞–π–º–∞—É—Ç"),
    }

    match timeout(Duration::from_secs(5), living_future).await {
        Ok(Ok(temp)) => println!("‚úÖ –ì–æ—Å—Ç–∏–Ω–∞—è (async): {}", temp),
        Ok(Err(e)) => println!("‚ùå –ì–æ—Å—Ç–∏–Ω–∞—è (async): {}", e),
        Err(_) => println!("‚è±Ô∏è –ì–æ—Å—Ç–∏–Ω–∞—è (async): –¢–∞–π–º–∞—É—Ç"),
    }

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è callbacks
    println!("\n=== Callbacks Demo ===");

    println!("=== Short Subscription Demo ===");
    println!("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (3 —Å–µ–∫)...");
    let subscription = kitchen_therm.on_temperature_change(|result| {
        if let Ok(temp) = result {
            println!("üå°Ô∏è –ö–æ—Ä–æ—Ç–∫–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: {}", temp);
        }
    });

    tokio::time::sleep(Duration::from_secs(3)).await;
    subscription.unsubscribe();
    println!("‚úÖ –û—Ç–ø–∏—Å–∞–ª–∏—Å—å, –±–æ–ª—å—à–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –±—É–¥–µ—Ç");

    tokio::time::sleep(Duration::from_secs(3)).await;
    println!("‚è∞ –ü—Ä–æ—à–ª–æ –µ—â–µ 3 —Å–µ–∫—É–Ω–¥—ã - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ—Ç!");

    println!("=== Long Subscription Demo ===");
    println!("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (10 —Å–µ–∫)...");

    let kitchen_subscription = kitchen_therm.on_temperature_change(|result| match result {
        Ok(temp) => println!("üî• –ö—É—Ö–Ω—è: —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å: {}", temp),
        Err(e) => println!("‚ùå –ö—É—Ö–Ω—è: –æ—à–∏–±–∫–∞: {}", e),
    });

    let living_subscription = living_therm.on_temperature_change(|result| match result {
        Ok(temp) => println!("üî• –ì–æ—Å—Ç–∏–Ω–∞—è: —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å: {}", temp),
        Err(e) => println!("‚ùå –ì–æ—Å—Ç–∏–Ω–∞—è: –æ—à–∏–±–∫–∞: {}", e),
    });

    sleep(Duration::from_secs(10)).await;
    kitchen_subscription.unsubscribe();
    living_subscription.unsubscribe();

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —É–º–Ω—ã–º –¥–æ–º–æ–º
    println!("\n=== –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —É–º–Ω—ã–º –¥–æ–º–æ–º ===");

    // –°–æ–∑–¥–∞–µ–º –¥–æ–º —Å UDP —Ç–µ—Ä–º–æ–º–µ—Ç—Ä–∞–º–∏
    let house = house![
        (
            "–∫—É—Ö–Ω—è",
            room![("–ö—É—Ö–Ω—è —Ç–µ—Ä–º–æ–º–µ—Ç—Ä", DeviceController::Therm(kitchen_therm)),]
        ),
        (
            "–≥–æ—Å—Ç–∏–Ω–∞—è",
            room![("–ì–æ—Å—Ç–∏–Ω–∞—è —Ç–µ—Ä–º–æ–º–µ—Ç—Ä", DeviceController::Therm(living_therm)),]
        )
    ];

    // –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç –¥–æ–º–∞
    for i in 1..=5 {
        println!("–û–ø—Ä–æ—Å #{}", i);
        println!("{}", house);
        sleep(Duration::from_secs(3)).await;
    }

    println!("\nüèÅ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");

    Ok(())
}
