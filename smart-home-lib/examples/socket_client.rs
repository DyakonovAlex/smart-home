//! –ü—Ä–æ—Å—Ç–æ–π TCP –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–º—É–ª—è—Ç–æ—Ä–∞ —É–º–Ω–æ–π —Ä–æ–∑–µ—Ç–∫–∏

use smart_home_lib::protocol::socket_protocol::{SocketCommand, send_command_and_receive};
use std::env;
use std::error::Error;
use tokio::net::TcpStream;

#[tokio::main]
async fn main() -> Result<(), Box<dyn Error>> {
    let args: Vec<String> = env::args().collect();

    // –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    let server_addr = if args.len() >= 2 {
        &args[1]
    } else {
        "127.0.0.1:3030" // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –∞–¥—Ä–µ—Å
    };

    println!("üîå TCP –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–º–Ω–æ–π —Ä–æ–∑–µ—Ç–∫–∏");
    println!("üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É: {}", server_addr);

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —ç–º—É–ª—è—Ç–æ—Ä—É
    let mut stream = match TcpStream::connect(server_addr).await {
        Ok(stream) => {
            println!("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!");
            stream
        }
        Err(e) => {
            eprintln!("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {}", e);
            eprintln!("üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —ç–º—É–ª—è—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {}", server_addr);
            return Err(e.into());
        }
    };

    println!("\nüß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...\n");

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    let test_commands = vec![
        ("–ó–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è", SocketCommand::Power),
        ("–í–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ–∑–µ—Ç–∫–∏", SocketCommand::TurnOn),
        ("–ó–∞–ø—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –≤–∫–ª—é—á–µ–Ω–∏—è", SocketCommand::Power),
        ("–í—ã–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ–∑–µ—Ç–∫–∏", SocketCommand::TurnOff),
        ("–ó–∞–ø—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –≤—ã–∫–ª—é—á–µ–Ω–∏—è", SocketCommand::Power),
    ];

    for (description, command) in test_commands {
        println!("üì§ {}: {:?}", description, command);

        match send_command_and_receive(&mut stream, &command).await {
            Ok(response) => {
                println!("üì• –û—Ç–≤–µ—Ç: {}", format_response(&response));
            }
            Err(e) => {
                eprintln!("‚ùå –û—à–∏–±–∫–∞: {}", e);
                break;
            }
        }

        println!(); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏

        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏
        tokio::time::sleep(tokio::time::Duration::from_millis(500)).await;
    }

    println!("‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
    println!("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏");

    Ok(())
}

/// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
fn format_response(response: &smart_home_lib::protocol::socket_protocol::SocketResponse) -> String {
    use smart_home_lib::protocol::socket_protocol::SocketResponse;

    match response {
        SocketResponse::Ok(data) => {
            let status = if data.active {
                "üü¢ –í–ö–õ–Æ–ß–ï–ù–ê"
            } else {
                "üî¥ –í–´–ö–õ–Æ–ß–ï–ù–ê"
            };
            let device_id = data.device_id.as_deref().unwrap_or("unknown");

            format!(
                "‚úÖ –£—Å–ø–µ—Ö | –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {} | –°—Ç–∞—Ç—É—Å: {} | –ú–æ—â–Ω–æ—Å—Ç—å: {:.1}W",
                device_id, status, data.power
            )
        }
        SocketResponse::Error { message } => {
            format!("‚ùå –û—à–∏–±–∫–∞: {}", message)
        }
    }
}
