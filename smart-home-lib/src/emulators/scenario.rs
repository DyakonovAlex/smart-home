//! –°—Ü–µ–Ω–∞—Ä–∏–∏ —ç–º—É–ª—è—Ü–∏–∏ —Ç–µ—Ä–º–æ–º–µ—Ç—Ä–∞

use std::fmt;

/// –°—Ü–µ–Ω–∞—Ä–∏–∏ —ç–º—É–ª—è—Ü–∏–∏ —Ç–µ—Ä–º–æ–º–µ—Ç—Ä–∞
#[derive(Debug, Clone, Copy, PartialEq)]
pub enum EmulationScenario {
    /// –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ - —Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
    Normal,
    /// –ü–æ–∂–∞—Ä - –±—ã—Å—Ç—Ä—ã–π —Ä–æ—Å—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã  
    Fire,
    /// –ó–∞–º–æ—Ä–æ–∑–∫–∞ - –±—ã—Å—Ç—Ä–æ–µ –ø–∞–¥–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    Freeze,
    /// –ö–æ–ª–µ–±–∞–Ω–∏—è - —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    Fluctuate,
}

impl fmt::Display for EmulationScenario {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        let description = match self {
            Self::Normal => "üå°Ô∏è –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞",
            Self::Fire => "üî• –ü–æ–∂–∞—Ä",
            Self::Freeze => "üßä –ó–∞–º–æ—Ä–æ–∑–∫–∞",
            Self::Fluctuate => "üìà –ö–æ–ª–µ–±–∞–Ω–∏—è",
        };
        write!(f, "{}", description)
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn scenario_display() {
        assert_eq!(
            format!("{}", EmulationScenario::Normal),
            "üå°Ô∏è –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞"
        );
        assert_eq!(format!("{}", EmulationScenario::Fire), "üî• –ü–æ–∂–∞—Ä");
        assert_eq!(format!("{}", EmulationScenario::Freeze), "üßä –ó–∞–º–æ—Ä–æ–∑–∫–∞");
        assert_eq!(format!("{}", EmulationScenario::Fluctuate), "üìà –ö–æ–ª–µ–±–∞–Ω–∏—è");
    }

    #[test]
    fn scenario_debug() {
        assert_eq!(format!("{:?}", EmulationScenario::Normal), "Normal");
    }
}
